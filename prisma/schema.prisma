datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userId        Int             @unique
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  wishList      WishListItem[]
  finishedList  FinishedListItem[]
  ratedList     RatedListItem[]
}

model Counter {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String @unique
  count  Int
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model amazonBooks {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  title         String  @map("Title")
  author        String? @map("authors")
  description   String  @map("description")
  genres        String  @map("categories")
  imageURL      String? @map("image")
  previewLink   String? @map("previewLink")
  publisher     String? @map("publisher")
  publishedDate String? @map("publishedDate")
  ratingsCount  Int    @map("ratings_count")
  bookId        Int     @map("book_id") @unique
  wishListItems     WishListItem[]
  finishedListItems FinishedListItem[]
  ratedListItems    RatedListItem[]

  @@map("amazon-new")
}

model WishListItem {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String      @db.ObjectId
  book      amazonBooks @relation(fields: [bookId], references: [bookId])
  bookId    Int
  addedAt   DateTime    @default(now())

  @@unique([userId, bookId])
}

model FinishedListItem {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String      @db.ObjectId
  book      amazonBooks @relation(fields: [bookId], references: [bookId])
  bookId    Int
  finishedAt DateTime   @default(now())

  @@unique([userId, bookId])
}

model RatedListItem {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String      @db.ObjectId
  book      amazonBooks @relation(fields: [bookId], references: [bookId])
  bookId    Int
  rating    Int
  ratedAt   DateTime    @default(now())

  @@unique([userId, bookId])
}

model Ratings {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    Int         @map("user")  
  bookId    Int         @map("item")
  rating    Float       @map("label")

  @@unique([userId, bookId])
  @@map("ratings-new")
}
